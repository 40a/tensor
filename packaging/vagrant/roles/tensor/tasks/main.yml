---

# Variable setup.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

# Setup/install tasks.
- include: "setup-RedHat.yml"
  when: ansible_os_family == 'RedHat'

- include: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Install docker compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: 0775

- name: Register the current Go version (if any)
  command: /usr/local/go/bin/go version
  ignore_errors: yes
  register: go_version
  changed_when: false

- name: Install cloud dependencies
  pip: "name={{ item }}"
  with_items: "{{ python_dependencies }}"

- name: Download the Go tarball
  get_url:
    url: "{{ go_download_location }}"
    dest: /usr/local/src/{{ go_tarball }}
    checksum: "{{ go_tarball_checksum }}"

- name: Extract the Go tarball if Go is not yet installed or not the desired version
  unarchive:
    src: /usr/local/src/{{ go_tarball }}
    dest: /usr/local
    copy: no
  when: go_version|failed or go_version.stdout != go_version_target

- name: Set GOPATHs for all users
  copy: "src={{ item }} dest=/etc/profile.d/"
  with_items:
    - go-path.sh
    - go-bin.sh

- name: Change user permissions to ssh_user
  file: "path={{ item }} owner={{ ansible_user_id }} group={{ ansible_user_id }}"
  with_items:
    - /vagrant
    - /vagrant/src
    - /vagrant/src/github.com
    - /vagrant/src/github.com/pearsonappeng

- name: Create tensor project dir
  file:
    path: /var/lib/tensor/projects/
    state: directory
    recurse: yes

- name: Copy tensor playbooks
  copy:
    src: "{{ playbook_dir }}/../ansible/playbooks"
    dest: /var/lib/tensor/

- name: Copy tensor plugins
  copy:
    src: "{{ playbook_dir }}/../ansible/plugins"
    dest: /var/lib/tensor/

- name: Make ansible inventory plugins executable
  file: "path=/var/lib/tensor/plugins/inventory/{{ item }} mode=0755 state=file"
  with_items: "{{ inventory_plugins }}"

- name: Create tensor data dir
  file:
    path: "{{item}}"
    state: directory
  with_items:
    - "{{ssl_certs_path}}"
    - "{{tensor_projects_home}}"

- name: Ensure Tensor is configured.
  template:
    src: tensor.conf.j2
    dest: "{{ tensor_conf_path }}"
    mode: 0644
  notify: "Restart MongoDB"

- name: Install reflex
  shell: go get -v github.com/cespare/reflex
  environment:
    GOPATH: /vagrant
    PATH : "{{ ansible_env.PATH }}:/go/bin:/usr/local/go/bin"

- name: Update go libraries
  shell: cd /vagrant/src/github.com/pearsonappeng/tensor && go get -v ./...
  environment:
    GOPATH: /vagrant
    PATH : "{{ ansible_env.PATH }}:/go/bin:/usr/local/go/bin"

- name: Navigate to vagrant path when vagrant ssh
  become: false
  shell: 'echo "cd /vagrant/src/github.com/pearsonappeng/tensor" >> ~/.profile  && echo "cd /vagrant/src/github.com/pearsonappeng/tensor" >> ~/.bashrc'

- name: Generate RSA key
  command: openssl genrsa -out {{ ssl_certs_privkey_path }} {{ ssl_certs_key_size }} creates={{ ssl_certs_privkey_path }}

- name: RSA key file ownership
  file: path={{ ssl_certs_privkey_path }} owner={{ ansible_user_id }} group={{ ansible_user_id }} mode={{ ssl_certs_mode }}

- name: Generate CSR
  command: openssl req -new -sha256 -subj "{{ ssl_certs_fields }}" -key {{ ssl_certs_privkey_path }} -out {{ ssl_certs_csr_path }} creates={{ ssl_certs_csr_path }}

- name: CSR file ownership
  file: path={{ ssl_certs_csr_path }} owner={{ ansible_user_id }} group={{ ansible_user_id }} mode={{ ssl_certs_mode }}

- name: Generate self-signed SSL certificate
  command: openssl req -nodes -x509 -sha256 -days {{ ssl_certs_days }} -in {{ ssl_certs_csr_path }} -key {{ ssl_certs_privkey_path }} -out {{ ssl_certs_cert_path }} -extensions v3_ca creates={{ ssl_certs_cert_path }}
  when: ssl_certs_generate_self_signed

- name: Self-signed SSL certificate file ownership
  file: path={{ ssl_certs_cert_path }} owner={{ ansible_user_id }} group={{ ansible_user_id }} mode={{ ssl_certs_mode }}
  when: ssl_certs_generate_self_signed