{
  "swagger": "2.0",
  "info": {
    "title": "Tensor API",
    "description": "Move your app forward with the Tensor API",
    "version": "1.0.0"
  },
  "host": "localhost",
  "schemes": [
    "http"
  ],
  "basePath": "/",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "The root of the Tensor REST API",
        "description": "The root of the Tensor REST API.\n\nMake a GET request to this resource to obtain information about the available\nAPI versions.",
        "responses": {
          "200": {
            "description": "API information",
            "schema": {
              "$ref": "#/definitions/ApiVersion"
            }
          }
        }
      }
    },
    "/v1": {
      "get": {
        "summary": "Version 1 of the Tensor REST API",
        "description": "Version 1 of the Ansible Tower REST API.\n\nMake a GET request to this resource to obtain a list of all child resources\navailable via the API.",
        "responses": {
          "200": {
            "description": "API information",
            "schema": {
              "$ref": "#/definitions/ApiV1"
            }
          }
        }
      }
    },
    "/v1/authtoken/": {
      "post": {
        "summary": "Auth Token",
        "description": "Make a POST request to this resource with `username` and `password` fields to\nobtain an authentication token to use for subsequent requests.If the username and password provided are valid, the response will contain a\n`token` field with the authentication token to use and an `expires` field with\nthe timestamp when the token will expire.\n\nOtherwise, the response will indicate the error that occurred and return a 4xx\nstatus code.\n\nFor subsequent requests, pass the token via the HTTP `Authorization` request\nheader:\n\n    Authorization: Token 8f17825cf08a7efea124f2638f3896f6637f8745\n\nThe auth token is only valid when used from the same remote address and user\nagent that originally obtained it.\n\nEach request that uses the token for authentication will refresh its expiration\ntimestamp and keep it from expiring.  A token only expires when it is not used\nfor the configured timeout interval (default 1800 seconds).",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "summary": "User Profile",
        "description": "The User Profile endpoint returns information about the Uber user that has authorized with the application.",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "Profile information for a user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Product": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "description": "Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles."
        },
        "description": {
          "type": "string",
          "description": "Description of product."
        },
        "display_name": {
          "type": "string",
          "description": "Display name of product."
        },
        "capacity": {
          "type": "string",
          "description": "Capacity of product. For example, 4 people."
        },
        "image": {
          "type": "string",
          "description": "Image URL representing the product."
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    },
    "ApiVersion": {
      "type": "object",
      "properties": {
        "available_versions": {
          "type": "object",
          "properties": {
            "v1": {
              "type": "string",
              "default": "/api/v1/"
            }
          }
        },
        "description": {
          "type": "string",
          "default": "Tensor REST API"
        },
        "current_version": {
          "type": "string",
          "default": "/api/v1/"
        }
      }
    },
    "AuthToken": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "ApiV1": {
      "type": "object",
      "properties": {
        "authtoken": {
          "type": "string",
          "default": "/api/v1/authtoken/"
        },
        "ping": {
          "type": "string",
          "default": "/api/v1/ping/"
        },
        "config": {
          "type": "string",
          "default": "/api/v1/config/"
        },
        "me": {
          "type": "string",
          "default": "/api/v1/me/"
        },
        "dashboard": {
          "type": "string",
          "default": "/api/v1/dashboard/"
        },
        "users": {
          "type": "string",
          "default": "/api/v1/users/"
        },
        "projects": {
          "type": "string",
          "default": "/api/v1/projects/"
        },
        "teams": {
          "type": "string",
          "default": "/api/v1/teams/"
        },
        "inventory": {
          "type": "string",
          "default": "/api/v1/inventories/"
        },
        "inventory_scripts": {
          "type": "string",
          "default": "/api/v1/inventories/"
        },
        "inventory_sources": {
          "type": "string",
          "default": "/api/v1/inventory_sources/"
        },
        "groups": {
          "type": "string",
          "default": "/api/v1/groups/"
        },
        "job_templates": {
          "type": "string",
          "default": "/api/v1/job_templates/"
        },
        "jobs": {
          "type": "string",
          "default": "/api/v1/jobs/"
        },
        "job_events": {
          "type": "string",
          "default": "/api/v1/job_events/"
        },
        "ad_hoc_commands": {
          "type": "string",
          "default": "/api/v1/ad_hoc_commands/"
        },
        "schedules": {
          "type": "string",
          "default": "/api/v1/schedules/"
        },
        "notification_templates": {
          "type": "string",
          "default": "/api/v1/notification_templates/"
        },
        "notifications": {
          "type": "string",
          "default": "/api/v1/notifications/"
        },
        "activity_stream": {
          "type": "string",
          "default": "/api/v1/activity_stream/"
        }
      }
    }
  }
}